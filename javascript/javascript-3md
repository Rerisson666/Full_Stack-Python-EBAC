# DOM

- Document Object Model
- Estrutura de um arquivo na Web
- Representa documentos HTML ou XML
- Interface de programação
- NÃo é uma linguagem de programação
- É essencial para o JS entender o modelo de página web

## Para que serve?

- Alterar a estrutura
- Alterar o estilo
- Alterar o conteúdo

## Como?

- Disponibilizndo API
- Rotinas e padrões estabelecidos
- Métodos (funções)
- Árvore de elementos
- Seletores
- Objetos (nós)

## Exemplo HTML

'''
<html>
    <head></head>
    <body></body>
</html>

'''

## Exemplo obj
objeto = {
    html : {
        head : {},
        body : {
            h1 : {   

            }
        }
    }
}

## DOM x JS

- O DOM pode ser usado por outras linguagens
- Sem o DOM o JS não teria noção da página

### Vantagens de usar JavaScripts

- Código é executado por navegadores
- Tornar as páginas dinâmicas
- Evitar Requisições desnecessárias (performance)
- SPA (Single Page Applications)
- Reagir rapidamente as ações dos usuários

### Desvantagem de usar o JavaScript

- Código é executado por navegador
- O conceito NÃO fica visível para inxadores de busca
- Alterações em tempo de execução não ficam salvas no documento

### Exemplos
Seleciona o objeto e disponibiliza (métodos / funções).callback

- document.getElementeById(id)
- document.getElementeByTagName
- document.createElement(name)
- parenteNode.appendChild(node) // html.appendChild('body')
element.innerHTML
- element.style
- element.setAttribute(name)
- element.addEventlistener(name)
- window.location
- window.onload
- console.log()
.window.scrollTo(x, y)

## Seletores
- Tipos de seletores: Tas, ID, Class, Name, Query
- Calback
- getElementById()
- getElementsByTagName()
- getElementsByName()
- getElementsByClassName()
- querySelectorAll() // #id | .class